{"ast":null,"code":"import _defineProperty from \"/Users/maryclayton/Documents/LambdaSchool/React-Todo/Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/maryclayton/Documents/LambdaSchool/React-Todo/Todo/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ToDoData } from './components/TodoComponents/TodoData';\nimport { TodoList } from './components/TodoComponents/TodoList';\nimport TodoForm from './components/TodoComponents/TodoForm';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.toggleItem = id => {\n      console.log(id);\n      this.setState({\n        todo: this.state.todo.map(item => {\n          if (item.id === id) {\n            return _objectSpread({}, item, {\n              completed: !item.completed\n            });\n          } else {\n            return item;\n          }\n        })\n      });\n    };\n\n    this.addItem = taskName => {\n      const newItem = {\n        task: taskName,\n        id: Date.now(),\n        completed: false\n      };\n      this.setState({\n        todo: [...this.state.todo, newItem]\n      });\n    };\n\n    this.clearTasks = () => {\n      this.setState({\n        todo: this.state.todo.filter(item => {\n          return !item.completed;\n        })\n      });\n    };\n\n    this.deleteTasks = tasksItem => {\n      const tasks = [...this.state.todo];\n      this.state.setState(tasks.filter(tasks => tasks.task !== tasksItem));\n    };\n\n    this.state = {\n      todo: ToDoData\n    };\n    this.deleteTasks = this.deleteTasks.bind(this);\n  }\n\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Welcome to your Todo App!\"), React.createElement(TodoForm, {\n      addItem: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(TodoList, {\n      todo: this.state.todo,\n      toggleItem: this.toggleItem,\n      deleteTasks: this.deleteTasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"clear-btn\",\n      onClick: this.clearTasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Clear Completed\")));\n  }\n\n} //close class function\n\n\nexport default App;","map":{"version":3,"sources":["/Users/maryclayton/Documents/LambdaSchool/React-Todo/Todo/src/App.js"],"names":["React","ToDoData","TodoList","TodoForm","App","Component","constructor","toggleItem","id","console","log","setState","todo","state","map","item","completed","addItem","taskName","newItem","task","Date","now","clearTasks","filter","deleteTasks","tasksItem","tasks","bind","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,sCAAvB;AACA,SAAQC,QAAR,QAAuB,sCAAvB;AACA,OAAOC,QAAP,MAAqB,sCAArB;;AAGA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAOZC,UAPY,GAOCC,EAAE,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAKG,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IAAX,CAAgBE,GAAhB,CAAoBC,IAAI,IAAI;AAChC,cAAIA,IAAI,CAACP,EAAL,KAAYA,EAAhB,EAAoB;AAClB,qCACKO,IADL;AAEEC,cAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAFnB;AAID,WALD,MAMO;AACH,mBAAOD,IAAP;AACD;AACJ,SAVK;AADM,OAAd;AAaH,KAtBa;;AAAA,SAwBdE,OAxBc,GAwBJC,QAAQ,IAAI;AACpB,YAAMC,OAAO,GAAG;AACdC,QAAAA,IAAI,EAAEF,QADQ;AAEdV,QAAAA,EAAE,EAAEa,IAAI,CAACC,GAAL,EAFU;AAGdN,QAAAA,SAAS,EAAE;AAHG,OAAhB;AAKA,WAAKL,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,IAAf,EAAqBO,OAArB;AADM,OAAd;AAGD,KAjCa;;AAAA,SAmCdI,UAnCc,GAmCD,MAAM;AACjB,WAAKZ,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IAAX,CAAgBY,MAAhB,CAAuBT,IAAI,IAAI;AAAC,iBAAO,CAACA,IAAI,CAACC,SAAb;AAAuB,SAAvD;AADM,OAAd;AAGD,KAvCa;;AAAA,SA2CdS,WA3Cc,GA2CCC,SAAD,IAAe;AAC7B,YAAMC,KAAK,GAAG,CAAC,GAAG,KAAKd,KAAL,CAAWD,IAAf,CAAd;AACE,WAAKC,KAAL,CAAWF,QAAX,CAAoBgB,KAAK,CAACH,MAAN,CAAaG,KAAK,IAAIA,KAAK,CAACP,IAAN,KAAeM,SAArC,CAApB;AAED,KA/Ca;;AAEZ,SAAKb,KAAL,GAAa;AACXD,MAAAA,IAAI,EAAEX;AADK,KAAb;AAGA,SAAKwB,WAAL,GAAmB,KAAKA,WAAL,CAAiBG,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AA4CD;AACA;AACA;AACAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADA,EAEA,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKZ,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGA,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAG,KAAKJ,KAAL,CAAWD,IAA5B;AACA,MAAA,UAAU,EAAE,KAAKL,UADjB;AAEA,MAAA,WAAW,EAAE,KAAKkB,WAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,EAOA;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAE,KAAKF,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPA,CADF,CADF;AAgBD;;AAvE+B,C,CAyEhC;;;AAEF,eAAenB,GAAf","sourcesContent":["import React from 'react';\nimport {ToDoData} from './components/TodoComponents/TodoData';\nimport {TodoList} from './components/TodoComponents/TodoList';\nimport TodoForm from './components/TodoComponents/TodoForm';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todo: ToDoData\n    }\n    this.deleteTasks = this.deleteTasks.bind(this);\n  }\n    toggleItem = id => {\n      console.log(id);\n      this.setState({\n        todo: this.state.todo.map(item => {\n          if (item.id === id) {\n            return {\n              ...item,\n              completed: !item.completed\n            };\n          }\n            else {\n              return item;\n            }\n        })\n      });\n  };\n\n  addItem = taskName => {\n    const newItem = {\n      task: taskName,\n      id: Date.now(),\n      completed: false\n    };\n    this.setState({\n      todo: [...this.state.todo, newItem]\n    });\n  };\n\n  clearTasks = () => {\n    this.setState({\n      todo: this.state.todo.filter(item => {return !item.completed})\n    });\n  };\n\n\n\n  deleteTasks = (tasksItem) => {\n  const tasks = [...this.state.todo]\n    this.state.setState(tasks.filter(tasks => tasks.task !== tasksItem\n      ))\n  }\n\n   \n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n        <h2>Welcome to your Todo App!</h2>\n        <TodoForm addItem={this.addItem}/>\n        <TodoList todo ={this.state.todo}\n        toggleItem={this.toggleItem}\n        deleteTasks={this.deleteTasks}\n        />\n        <button className=\"clear-btn\" onClick={this.clearTasks}>\n                    Clear Completed\n                </button>\n                \n        </div>\n      </div>\n    );\n  }\n\n} //close class function\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}